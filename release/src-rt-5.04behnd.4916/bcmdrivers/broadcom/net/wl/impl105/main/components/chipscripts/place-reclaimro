#!/usr/bin/perl

# Usage:
#	place_reclaimro <file.S>
#
# Reprocesses <file.S> which contains assembly text (gcc compiler output).
# Places __FUNCTION__ strings unto new rodataini section


use strict;
use warnings;

sub usage {
    print STDERR "Usage: replace-rostrings <rombase> <file.S>\n";
    exit 1;
}

my $rombase;
my $fname;
my $fnrombin;

($fname = shift @ARGV) || &usage;
shift @ARGV && &usage;

die "Input is not a .S file\n" if $fname !~ /\.S$/;

# Process the .S file, appending output to a string.

my $asm_out = '';
my $changed = 0;

open(my $fh, $fname) or
    die "Could not open $fname for reading: $!\n";

my @ini_strs = ("", "", "", "");
my %ptrs;
my %refini;
my %ref;
my %funclab;
my %lclab;
my $line;
# Locate the .rodata.str1.1 section
while ($line = <$fh>) {
    last if $line =~ /^\t\.section\t\.debug/;

    if ($line =~ /^\t\.section\t\.text/) {
	my $section;
	if ($line =~ /^\t\.section\t\.textini([123])/) {
	    $section = $1;
	} else {
	    $section = "";
	}
	$asm_out .= $line;

	while ($line = <$fh>) {
	    if ($line =~ /^\t\.section\t\./) {
		last;
	    }

	    $asm_out .= $line;

	    if (($line =~ /^\t\.word\t(\.LANCHOR\d+)$/) ||
		($line =~ /^\t\.word\t(\.LC\d+)$/)) {
		# Remember if this reference is in a single reclaim section
		my $anchor = $1;
		if (($section ne "") &&
		    (!defined($refini{$anchor}) || ($refini{$anchor} == $section))) {
		    $refini{$anchor} = $section;
		} else {
		    # Mark as not reclaimable
		    $ref{$anchor} = "X";
		}
	    }
	}

	redo;

    }

    if ($line =~ /^\t\.section\t\.rodata\.str/) {
	# RO string data - check for label definitions
	$asm_out .= $line;
	while ($line = <$fh>) {
	    if ($line =~ /^\t\.section\t\./) {
		last;
	    }

	    if (($line =~ /^\t\.word\t(\.LANCHOR\d+)$/) ||
		($line =~ /^\t\.word\t(\.LC\d+)$/)) {
		# Mark as not reclaimable
		my $anchor = $1;
		$ref{$anchor} = "X";
	    }

	    $asm_out .= $line;

	}

	redo;

    } elsif ($line =~ /^\t\.section\t\.rodata\.__FUNCTION__/) {
	# Function name string definition
	my $secline = $line;
	$line = <$fh>;
	if ($line =~ /\t\.set\t(\.LANCHOR\d+),/) {
	    my $la = $1;
	    $funclab{$la} = $secline;
	}

	$asm_out .= $secline . $line;

    } elsif ($line =~ /^\t\.section\t\.(ro)?data/) {
	my $section;
	if ($line =~ /^\t\.section\t\.dataini([123])/) {
	    $section = $1;
	} else {
	    $section = "";
	}
	$asm_out .= $line;

	while ($line = <$fh>) {
	    if ($line =~ /^\t\.section\t\./) {
		last;
	    }

	    $asm_out .= $line;

	    if (($line =~ /^\t\.word\t(\.LANCHOR\d+)$/) ||
		($line =~ /^\t\.word\t(\.LC\d+)$/)) {
		# Remember if this reference is in a single reclaim section
		my $anchor = $1;
		if (($section ne "") &&
		    (!defined($refini{$anchor}) || ($refini{$anchor} == $section))) {
		    $refini{$anchor} = $section;
		} else {
		    # Mark as not reclaimable
		    $ref{$anchor} = "X";
		}
	    }
	}

	redo;

    } else {
	$asm_out .= $line;

    }



}

my $la;

# We no longer process LC-type labels because they cause problems when 
# referecens to them survive the reclaim.  wlc_dump_register is an example.
# This means that we loose printf-type format strings.
foreach $la (keys %lclab) {
    my $str_orig = $lclab{$la};
    if (defined($refini{$la}) && !defined($ref{$la})) {
	# Put the string in an INI section.  Leave the marker as a comment
	$ini_strs[$refini{$la}] .= $str_orig;
	$changed = 1;
    } else {
	# Replace the marker with the original text
	$asm_out =~ s/\@\@\@ $la moved to reclaim section\n/$str_orig/;
    }
}

foreach $la (keys %funclab) {
    if (defined($refini{$la}) && !defined($ref{$la})) {
	# Used only in one reclaim section
	my $replace = $funclab{$la};
	$replace =~ s/rodata/rodataini${refini{$la}}/;
	$asm_out =~ s/$funclab{$la}/$replace/;
	$changed = 1;
    }
}


# Output the rodataini sections
if ($ini_strs[1] ne "") {
    $asm_out .= "\t.section\t.rodataini1.str1.1,\"aMS\",\%progbits,1\n";
    $asm_out .= $ini_strs[1];
}
if ($ini_strs[2] ne "") {
    $asm_out .= "\t.section\t.rodataini2.str1.1,\"aMS\",\%progbits,1\n";
    $asm_out .= $ini_strs[2];
}
if ($ini_strs[3] ne "") {
    $asm_out .= "\t.section\t.rodataini3.str1.1,\"aMS\",\%progbits,1\n";
    $asm_out .= $ini_strs[3];
}

# Read the rest of the file unchanged
if (defined($line)) {
    $asm_out .= $line;
    $asm_out .= $line while $line = <$fh>;
}

close $fh;

# Overwrite the input file with the output
if ($changed) {
    open($fh, ">$fname") or
	die "Could not open $fname for writing: $!\n";
    print $fh $asm_out;
    close $fh;
}
