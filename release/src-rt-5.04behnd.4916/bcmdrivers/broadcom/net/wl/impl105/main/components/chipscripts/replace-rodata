#!/usr/bin/perl

# Usage:
#	replace-rodata <rombase> <roml.map> <roml.bin> <file.S>
#
# Reprocesses <file.S> which contains assembly text (gcc compiler output).
#
# Searches for .rodata symbols (sections) in the assembly text.  If a symbol
# found that is already present in the ROM, then the whole .rodata section
# can be removed and replaced by a symbol pointing to the ROM, saving space.
#
# However, a symbol can't be replaced if it has been changed so it no longer
# matches what's in ROM.  For this reason, the contents of the .rodata section
# candidate must be compared against the original data found in the ROM
# (roml.bin).  To do that, the assembler representation of the binary data
# (.byte, .short, etc) must be parsed and translated into binary.
#
# <rombase>, typically 0x800000, must be passed in so the script can
# translate symbol addresses to offsets in roml.bin.
#
# For example, if <rombase> is 0x800000, and <file.S> contains an .rodata
# section like this:
#
# 	.section	.rodata.btc_ucode_flags,"a",%progbits
# 	.align	1			<== optional
# 	.set	.LANCHOR6,. + 0
# 	.type	btc_ucode_flags, %object
# 	.size	btc_ucode_flags, 36
# btc_ucode_flags:
# 	.byte	1
# 	.space	1
# 	.short	512
# 	.byte	2
#	...
#
# and there is a roml.map symbol btc_ucode_flags at 0x8628c8, and the block
# of data (01 00 00 02 02 ...) matches the contents of roml.bin at offset
# 0x628c8, then this script will replace that section with:
#
#	.set	.LANCHOR6, 0x8628c8
# btc_ucode_flags = 0x8628c8
#
# Notes: The first implementation didn't use <roml.map>.  It just replaced an
# rodata blob with a pointer to a matching blob anywhere in <roml.bin> that
# had sufficient alignment.  This finds a few more replacements, but some of
# those are in code that is optimized out by gcdata.  The newly defined
# symbols were not optimized out and appeared in rtecdc.map.  They were mostly
# harmless except confused some size monitoring scripts.

use strict;
use warnings;
use Getopt::Std;

$0 =~ s,.*/,,;

sub usage {
    print STDERR "Usage: replace-rostrings <rombase> <rodata_end> <roml.map> <roml.bin> <file.S>\n";
    exit 1;
}

my $debug = 0;

sub dprint {
    print ("$0: " . shift) if $debug;
}

my $idre = '([.\w$]+)';
my $hexre = '([0-9a-f]{8})';

my $rombase;
my $rom_rodata_end;
my $fname;
my $fnrommap;
my $fnrombin;

# Parse optional command line options.
my %opts;
my $autopatch_cfg;
getopts('p:', \%opts);
if ($opts{p}) {
	$autopatch_cfg = $opts{p};
}

($rombase = shift @ARGV) || &usage;
($rom_rodata_end = shift @ARGV) || &usage;
($fnrommap = shift @ARGV) || &usage;
($fnrombin = shift @ARGV) || &usage;
($fname = shift @ARGV) || &usage;
shift @ARGV && &usage;

die "Input is not a .S file\n" if $fname !~ /\.S$/;

# Convert string to integer
$rombase = oct $rombase if $rombase =~ /^0x/;
$rom_rodata_end = oct $rom_rodata_end if $rom_rodata_end =~ /^0x/;

my $fh;

my %force_replace;

# Read the ROM map
my %rommap = ();
my ($rom_addr, $rom_sym);
open($fh, $fnrommap) or die "Couldn't open ${fnrommap}: $!\n";
while (<$fh>) {
    if (/^${hexre} \w ${idre}$/) {
        $rom_addr = hex($1);
        $rom_sym  = $2;
        # Only parse ROM symbols. (Exclude symbols from RAM shdat section which are included
        # in the ROM map file).
        if (($rom_addr >= $rombase) && ($rom_addr < $rom_rodata_end)) {
            $rommap{$rom_sym} = $rom_addr;
        }
    }
}
close $fh;

dprint sprintf "Loaded %d symbols from %s\n", scalar keys %rommap, $fnrommap;


# Read the auto patch configuration file.
# Force patched IOVAR tables to be used from ROM.
if ($autopatch_cfg) {
	my $fname_C = $fname;
	$fname_C =~ s/\.S$/.c/i;
	open($fh, $autopatch_cfg) or die "Couldn't open ${$autopatch_cfg}: $!\n";
	while (<$fh>) {
		if ($_ =~ /^(?:IOCTL|IOVAR)\s+(\w+\.c)\s+${idre}\s+${idre}\s*$/) {
			my $fname_in_config = $1;
			my $handler         = $2;
			my $table           = $3;

			# Force patched IOVAR tables to be used from ROM, as long as both the
			# the handler and table exist in ROM.
			if (($fname_C eq $fname_in_config) && $rommap{$handler} && $rommap{$table}) {
				$force_replace{$table} = 1;
			}
		}
	}
	close $fh;
}


# Read the ROM library into a string
my $rombin;
open($fh, $fnrombin) or die "Couldn't open ${fnrombin}: $!\n";
binmode $fh;
{
    local $/;		# Slurp
    $rombin = <$fh>;
}
close $fh;

dprint sprintf "Loaded %d bytes from %s\n", length $rombin, $fnrombin;

# Translate a backslash encoding (\n, \t, \012, etc) to binary character
sub ue_chr {
    my $s = shift;
    my %ue_map = ('"' => "\"", "\\" => "\\", 'a' => "\007", 'b' => "\010",
		  'e' => "\033", 'f' => "\014", 'n' => "\012", 'r' => "\015",
		  't' => "\011", 'v' => "\013");
    defined $ue_map{$s} && return $ue_map{$s};
    $s =~ /^(x\S+|\d+)$/ && return chr oct "0$1";
    die;
}

# Translate all backslash encodes in a string
sub unescape {
    my $s = shift;
    $s =~ s/\\([\"\\abefnrtv]|\d{1,3}|x[0-9a-fA-F]+)/&ue_chr($1)/ge;
    return $s;
}

# Process the .S file, appending output to a string.

my $asm_out = '';
my $asm_changed;

my $tot_savings = 0;

open($fh, $fname) or
    die "Could not open $fname for reading: $!\n";

# Search for .rodata sections in the expected form
outer: while (<$fh>) {
    my $save = $_;

    goto copyout if !/^\t\.section\t\.rodata\.($idre),"a",%progbits/;

    my $sym = $1;
    my ($anchor, $type, $size);
    my $align = 0;	# lg2 alignment

    # Skip function string labels, e.g. __FUNCTION__.1234. There is no correlation between the
    # numbered suffix from the ROM build and the ROM-offload build. Also, replace-rostrings is
    # used to replace strings in the ROM-offload image with pointers to matching strings from the
    # ROM image.
    if ($sym =~ /__FUNCTION__\.[0-9]+/) {
	    dprint "==> Skipping function string $sym\n";
	    goto copyout;
    }

    if (!$rommap{$sym}) {
	dprint "==> rodata $sym at $fname:$.: not found in ROM map\n";
	goto copyout;
    }

    my $romaddr = $rommap{$sym};
    my $romoffset = $romaddr - $rombase;

    dprint (sprintf "==> rodata $sym at $fname:$.: ROM address 0x%x, offset 0x%x\n",
	    $romaddr, $romoffset);
    if ($romoffset < 0) {
        die "$0: Error: Invalid ROM offset ($romoffset) for '$sym'\n";
    }

    while (<$fh>) {
	$save .= $_;
	if (/^\t\.set\t($idre),\. \+ 0$/) {
	    $anchor = $1;
	} elsif (/^\t\.type\t\Q$sym\E, %(\w+)$/) {
	    $type = $1;
	} elsif (/^\t\.size\t\Q$sym\E, (\d+)$/) {
	    $size = $1;
	} elsif (/^\t\.align\t(\d+)$/) {
	    $align = $1;
	} elsif (/^\t\.global\t\Q$sym\E$/) {
	    # ignore
	} elsif (/^\Q$sym\E:$/) {
	    last;
	} else {
	    # If anything else is seen, abort and leave unchanged
	    dprint "Unrecognized line: $_";
	    goto copyout;
	}
    }

    # If anything goes wrong, abort and leave unchanged
    if (eof $fh) {
	dprint "EOF while parsing header\n";
	goto copyout;
    }

    if ($type ne 'object') {
	dprint "Not an object\n";
	goto copyout;
    }

    if (!$size) {
	dprint "Zero or missing size\n";
	goto copyout;
    }

    # Header looks good; now parse out the raw data
    my $blob = '';
    while (<$fh>) {
	if (/\t\.(section|text|weak)/) {
		# End of data found (EOF is also valid end of data found)
		# Push back the last line read
		# matches commented-out sections too
		seek($fh, -length($_), 1);
		last;
	} elsif ($force_replace{$sym}) {
		$save .= $_;
	} elsif (/\t\.byte\t(\S+)$/) {
	    $save .= $_;
	    $blob .= chr($1 < 0 ? $1 + 256 : $1);
	} elsif (/\t\.space\t(\S+)$/) {
	    $save .= $_;
	    $blob .= chr(0) x $1;
	} elsif (/\t\.ascii\t"(.*)"$/) {
	    $save .= $_;
	    $blob .= &unescape($1)
	} elsif (/\t\.short\t(\S+)$/) {
	    $save .= $_;
	    my $val = $1 < 0 ? $1 + 65536 : $1;
	    $blob .= chr(($val >> 0) & 0xff);
	    $blob .= chr(($val >> 8) & 0xff);
	} elsif (/\t\.2byte\t(\S+)$/) {
	    $save .= $_;
	    my $val = $1 < 0 ? $1 + 65536 : $1;
	    $blob .= chr(($val >> 0) & 0xff);
	    $blob .= chr(($val >> 8) & 0xff);
	} elsif (/\t\.word\t(\S+)(\t\@\@\@.*)?$/) {
	    $save .= $_;
	    my $val = $1;
	    # TBD: A symbol name may appear with .word.  We should pass in the .map
	    # file and look up the symbol in this case.  For now, just abort.
	    if ($val =~ /^0x[0-9a-fA-F]+$/) {
		$val = hex($val);
	    } elsif ($val !~ /^[-0-9]/) {
		dprint "Not looking up symbol in .word\n";
		goto copyout;
	    }
	    $val = $val < 0 ? $val + 4294967296 : $val;
	    $blob .= chr(($val >> 0) & 0xff);
	    $blob .= chr(($val >> 8) & 0xff);
	    $blob .= chr(($val >> 16) & 0xff);
	    $blob .= chr(($val >> 24) & 0xff);
	} else {
	    dprint "Unrecognized line: $_";
	    # Push back the last line read
	    seek($fh, -length($_), 1);
	    # Abort and leave unchanged
	    goto copyout;
	}
    }

    if ($romoffset + length $blob > length $rombin) {
	dprint "ROM symbol $sym in $fnrommap offset $romoffset out of range of ROM\n";
	goto copyout;
    }

	# Check that the blob matches the binary data in ROM.
	if ($force_replace{$sym}) {
		dprint "Forced ROM match $romaddr\n";
	}
	else {
		if ($blob ne substr $rombin, $romoffset, length $blob) {
		    dprint "Binary data does not match\n";
		    goto copyout;
		}

		dprint "Replacing ROM match\n";
	}

    # Modify the definition block.
    # Start by prefixing each line with @@@ (comment)

    $save =~ s/^/\@\@\@/gm;

    # Leave in certain of the header lines
    $save =~ s/^\@\@\@(\t\.(type|size|global))/$1/gm;

    # Replace the relative anchor value with absolute address
    $save =~ s/(^\@\@\@(\t\.set\t\Q$anchor\E,)\. \+ 0)$/$1\n$2 $romaddr/gm
	if $anchor;

    # Replace the function label with assignment of absolute address
    $save =~ s/(^\@\@\@\Q$sym\E:)$/$1\n$sym = $romaddr/gm;

    $tot_savings += $size if defined $size;

    $asm_changed = 1;

  copyout:
    $asm_out .= $save;
}

close $fh;

# If no matches were found, leave input file unchanged.
exit 0 if !$asm_changed;

dprint "Found $tot_savings bytes\n";

# Overwrite the input file with the output (keep input too, if debugging)

rename($fname, "$fname.in") if $debug;

open($fh, ">$fname") or
    die "Could not open $fname for writing: $!\n";
print $fh $asm_out;
close $fh;
