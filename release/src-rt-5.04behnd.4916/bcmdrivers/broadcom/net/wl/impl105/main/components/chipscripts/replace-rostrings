#!/usr/bin/perl

# Usage:
#	replace-rostrings <rombase> <roml.bin> <file.S>
#
# Reprocesses <file.S> which contains assembly text (gcc compiler output).
# Searches for labeled, read-only .ascii strings in the .rodata.str1.1
# section.  Such strings are looked up in <roml.bin>, and if found, are
# removed from <file.S> and replaced by a simple symbol pointing to ROM.
#
# <rombase> is added to the string offsets to generate ROM addresses.
# It must correspond to the base ROM address where roml.bin can be found.
#
# For example, if <file.S> defines an rodata string like this:
#
#	.LC0:
#		.ascii	"This is part of a string and this partic"
#		.ascii	"ular one spans multiple lines.\012\000"
#
# and the string thereby represented is found in roml.bin at offset 0x5f3c8,
# this script will replace that definition with (if <rombase> is 0x800000):
#
#	.LC0 = 0x85f3c8
#
# In addition the __FUNCTION__ style strings are replaced so something like:
#
# 	.section	.rodata.__FUNCTION__.9313,"a",%progbits
#	.set	.LANCHOR0,. + 0
#	.type	__FUNCTION__.9313, %object
#	.size	__FUNCTION__.9313, 7
#__FUNCTION__.9313:
#	.ascii	"c_init\000"
#
# gets replaced by:
#
#	.set	.LANCHOR0,0x885d20
#__FUNCTION__.9313 = 0x885d20
#



use strict;
use warnings;

sub usage {
    print STDERR "Usage: replace-rostrings <rombase> <roml.bin> <file.S>\n";
    exit 1;
}

# Translate a backslash encoding (\n, \t, \012, etc) to binary character
sub ue_chr {
    my $s = shift;
    my %ue_map = ('"' => "\"", "\\" => "\\", 'a' => "\007", 'b' => "\010",
		  'e' => "\033", 'f' => "\014", 'n' => "\012", 'r' => "\015",
		  't' => "\011", 'v' => "\013");
    defined $ue_map{$s} && return $ue_map{$s};
    $s =~ /^(x\S+|\d+)$/ && return chr oct "0$1";
    die;
}

# Translate all backslash encodes in a string
sub unescape {
    my $s = shift;
    $s =~ s/\\([\"\\abefnrtv]|\d{1,3}|x[0-9a-fA-F]+)/&ue_chr($1)/ge;
    return $s;
}


my $rombase;
my $fname;
my $fnrombin;
my %symmap;

($rombase = shift @ARGV) || &usage;
($fnrombin = shift @ARGV) || &usage;
($fname = shift @ARGV) || &usage;
shift @ARGV && &usage;

die "Input is not a .S file\n" if $fname !~ /\.S$/;

# Convert string to integer
$rombase = oct $rombase if $rombase =~ /^0x/;

# Build the string offsets table.  It is a hash whose indexes are the strings
# (including terminating NULs), and whose values are the corresponding offsets.

my %stroff;
open(my $fh, $fnrombin) or die "Couldn't open ${fnrombin}: $!\n";
{
    local $/ = "\000";
    my $off = 0;
    binmode $fh;
    while (<$fh>) {
	$stroff{$_} = sprintf "0x%x", $rombase + $off;
	$off = tell $fh;
    }
}
close $fh;

# Process the .S file, appending output to a string.

my $asm_out = '';

open($fh, $fname) or
    die "Could not open $fname for reading: $!\n";

# Locate the .rodata.str1.1 section
while (<$fh>) {
    # Search for function strings
    if (/^\t\.section\t\.rodata\.(__FUNCTION__\.\d+),/) {
	my $sym = $1;
	my $str_orig = $_;
	my $comm = "@@@ " . $_;
	my $anchor;
	while (<$fh>) {
	    $comm .= "@@@ " . $_;
	    if (/^\t\.set\t(.LANCHOR\d+),\. \+ 0$/) {
		$str_orig .= $_;
		$anchor = $1;
	    } elsif (/^\t\.type\t$sym, %(\w+)$/) {
		if ($1 ne "object") {
		    last;
		}
		$str_orig .= $_;
	    } elsif (/^\t\.size\t$sym, (\d+)$/) {
		$str_orig .= $_;
	    } elsif (/^$sym:$/) {
		$str_orig .= $_;
		$_ = <$fh>;
		$str_orig .= $_;
		$comm .= "@@@ " . $_;
		if (/\t\.ascii\t"(.*)"$/) {
		    my $funcstr = &unescape($1);
		    if (exists($stroff{$funcstr}) && defined($anchor)) {
			$asm_out .= $comm;
			$asm_out .= "\t.set\t$anchor,$stroff{$funcstr}\n";
			$asm_out .= "$sym = $stroff{$funcstr}\n";
			$str_orig = "";
		    }
		}
		$_ = "";
		last;
	    } else {
		# If anything else is seen, abort and leave $_
		last;
	    }
	}

	$asm_out .= $str_orig;
	redo;
    }

    if (/^\t\.section\t\.rodata/) {
	$asm_out .= $_;
        # Process .ascii strings as long as we're in the same section
	while (<$fh>) {
	    if (/^\t\.section\t/) {
		last;
	    }

	    # Some functions use anchors+offset to index into rodata so
	    # changing the labels doesn't work.  Punt if that happens.
	    if (/^\t\.set\t\.LANCHOR/) {
		last;
	    }

	    if (/^(\.LC\d+):/) {
		my $label = $1;
		my $str_orig = $_;
		my $str_comment = "\@\@\@$_";
		my $str_raw = '';

		defined($_ = <$fh>) or die "Unexpected EOF after $label\n";

		while (/\t\.ascii\t"(.*)"$/) {
		    $str_orig .= $_;
		    $str_comment .= "\@\@\@$_";
		    $str_raw .= &unescape($1);
		    defined($_ = <$fh>) or die "Unexpected EOF after .ascii\n";
		}

		if ($str_raw eq "") {
		    # No ascii string found
		    $asm_out .= $str_orig;
		    redo;
		}

		my $newoff;
		if (exists $stroff{$str_raw}) {
		    $newoff = $stroff{$str_raw};

		} else {
		    my $key = "";
		    my $value = 0;
		    foreach my $key ( keys(%stroff) ) {
			if ($key =~ /\Q$str_raw\E$/) {
			    $newoff = sprintf("0x%x", 
					      hex($stroff{$key}) + 
					      length($key) - length($str_raw));

			    last;
			}
		    }
		}

		if (defined($newoff)) {
		    $symmap{$label} = $newoff;
		    $str_comment .= "\@\@\@\n";
		    $asm_out .= $str_comment;
		    $asm_out .= "$label = $newoff\n";
		} else {
		    $asm_out .= $str_orig;
		}

		redo;

	    }

	    # Nothing special - just dump back out
	    $asm_out .= $_;
	}

	redo;

    } else {
	# Nothing special - just dump back out
	$asm_out .= $_;
    }
}

close $fh;

# Post-process the labels that were found
foreach my $lab (keys(%symmap)) {
    my $newoff = $symmap{$lab};
    $asm_out =~ s/^\t\.word\t${lab}$/\t.word\t${newoff}\t\@\@\@ ${lab}/mg;
}

# Overwrite the input file with the output
open($fh, ">$fname") or
    die "Could not open $fname for writing: $!\n";
print $fh $asm_out;
close $fh;
