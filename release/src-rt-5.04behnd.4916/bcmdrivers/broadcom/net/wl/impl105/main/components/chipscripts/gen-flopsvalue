#!/usr/bin/perl
# Usage:
#	gen-flopsvalue <option> <files corr to option>
# Options are following
# 1) gen-flopsvalue -addsection $fnameLds $flops_start
#		Adds a new section in $fnameLds at $flops_start mainly for 
#			roml images and ram images which start at non-0 address. 
# 2) gen-flopsvalue -delvnsection .tmp.rtecdc.lds
#		Adds or deletes the flops section in lds file, replacing
#			FLOPS_EXECV_SECTION with a blank.

use warnings;
use Getopt::Std;

sub usage {
    print STDERR "Usage: gen-flopsvalue <option> <files corr to option>\n";
    exit 1;
}

my $option;
my $fnameLds;
my $flops_start;
my $text_start;

sub flops_addsection {
	if ($#ARGV != 3) {
		&usage;
	} 
	$fnameLds = $ARGV[1];
	$flops_start = $ARGV[2];
	$text_start = $ARGV[3];

	# open file
	open(my $fhLds, $fnameLds) or
	    die "Could not open $fnameLds for reading: $!\n";

	my @lds_in = <$fhLds>;
	close $fhLds;

	my $lds;
	my $lds_line = 0;
	my @lds_out = ();
	my $b;
	
	# copy till FLOPS_EXECV_SECTION
	while ($lds_line < @lds_in) {
	    $b = $lds_in[$lds_line++];
	    if ($b =~ /FLOPS_EXECV_SECTION/) {
	    	last;
	    }
	    push @lds_out, $b;
	}

	# if FLOPS_EXECV_SECTION found
	if ($lds_line < @lds_in) {
		# add a new section ONLY if text start is different from flops_start.
		if (hex($text_start) != hex($flops_start)) {
			# new section is required only if tex_start and flops_start are different.
			push @lds_out, "\t . = $flops_start;\n";
			push @lds_out, "\t.startup_flops_reloc : {\n"; 
			push @lds_out, "\t\t*(.text.startup) \n\t\t}\n"; 
		}

		# copy rest of the lines conditionally.
		while ($lds_line < @lds_in) {
		    $b = $lds_in[$lds_line++];

		    if ($b =~ /\*\(\.text\.startup\)/) {
				if (hex($text_start) != hex($flops_start)) {
			    	# because the text.startup is moved to flops_start, keep a dup_ram section here. 
			    	push @lds_out, "\t\tKEEP(*(.text.startup_flops_dup_ram))\n";
			    	push @lds_out, "\t\t*(.text.startup_flops)\n";
			    	next;
			    } else {
			    	# if tex_start and flops_start are same, we need to keep the .text.startup, and also keep the duplicate flops after that.
				    push @lds_out, $b;
			    	push @lds_out, "\t\t*(.text.startup_flops)\n";
				    next;
			    }
		    } 
		    push @lds_out, $b;
		}
	}
	# Combine all the lines into a giant string for 10-15x faster replacement
	$lds = join '', @lds_out;		

	# Overwrite the input file with the output
	open($fhLds, ">$fnameLds") or
	    die "Could not open $fnameLds for writing: $!\n";
	print $fhLds $lds;
	close $fhLds;
}

sub flops_delsection {
	if ($#ARGV != 1) {
		&usage;
	} 
	$fnameLds = $ARGV[1];

	# open file
	open(my $fhLds, $fnameLds) or
	    die "Could not open $fnameLds for reading: $!\n";

	my @lds_in = <$fhLds>;
	close $fhLds;
	my @lds_out;

	my $lds;

	# no flops copy. Just remove the FLOPS_EXECV_SECTION from lds and exit
	map { 
		if (/[\s\t]*FLOPS_EXECV_SECTION/) {
	    	$_ =~ s/FLOPS_EXECV_SECTION//;
	    }
	} @lds_in;		

	# Combine all the lines into a giant string for 10-15x faster replacement
	$lds = join '', @lds_in;

	# Overwrite the input file with the output
	open($fhLds, ">$fnameLds") or
	    die "Could not open $fnameLds for writing: $!\n";
	print $fhLds $lds;
	close $fhLds;
}

######## actual routine #########
$option = $ARGV[0];
if ($option eq "-addsection") {
		&flops_addsection;
} else {
	if ($option eq "-delsection") {
		&flops_delsection;
	} else {
			&usage;
	}
}
